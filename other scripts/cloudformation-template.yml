AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create two Lambda functions, API Gateway, and S3 buckets.

Resources:
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "photo-album-page-frontend-${AWS::AccountId}"
      WebsiteConfiguration:
        IndexDocument: index.html
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicRead
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${FrontendBucket}/*"

    
  StorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "photo-album-storage-${AWS::AccountId}-${AWS::Region}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false

  StorageBucketPolicy:
    DependsOn: StorageBucket
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StorageBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: RekognitionAccess
            Effect: Allow
            Principal:
              Service: rekognition.amazonaws.com
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource: !Sub "arn:aws:s3:::${StorageBucket}/*"
          - Sid: PublicRead
            Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource: !Sub "arn:aws:s3:::${StorageBucket}/*"


  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "lambda-execution-role-${AWS::AccountId}-${AWS::Region}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3control:PutPublicAccessBlock
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${StorageBucket}"
                  - !Sub "arn:aws:s3:::${StorageBucket}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  SearchPhotosLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "search-photos-cloudFormation-Function"
      Runtime: nodejs20.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: assignment-3-lambda-codes
        S3Key: search-photos.zip

  IndexPhotosLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "upload-photos-cloudFormation-Function"
      Runtime: nodejs20.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: assignment-3-lambda-codes
        S3Key: upload-photos.zip

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: PhotoApi
      BodyS3Location:
        Bucket: assignment-3-lambda-codes
        Key: APIGateway-photos.yaml

  LambdaPermissionSearch:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SearchPhotosLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*"

  LambdaPermissionIndex:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref IndexPhotosLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*"

Outputs:
  FrontendBucketUrl:
    Value: !Sub "http://${FrontendBucket}.s3-website-${AWS::Region}.amazonaws.com"
    Description: "URL of the frontend S3 bucket hosting the website"

  ApiGatewayUrl:
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/photos"
    Description: "Base URL of the API Gateway"
